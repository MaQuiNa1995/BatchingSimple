<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
                           http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- Le decimos a spring donde buscar los bean que hemos anotado con @Component 
		o equivalente -->
	<context:component-scan
		base-package="es.maquina" />


	<!-- Creacion del lanzador de jobs -->
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<!-- Creacion del repositorio de jobs -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />

	<!-- Se usa para que Spring inyecte los archivos de propiedades y podamos 
		usar su valor -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- se usa para hacer referencia a las localizaciones donde van nuestros 
			archivos de propiedades -->

		<!-- Asi para 1 archivo -->
		<!-- <property name="location" value="configuracion.properties" /> -->

		<!-- Asi para varios -->
		<property name="locations">
			<list>
				<value>configuracion.properties</value>
			</list>
		</property>
	</bean>

	<!-- Reader generico para leer bases de datos -->
	<bean id="databaseItemReader"
		class="org.springframework.batch.item.database.JdbcPagingItemReader">
		<!-- Seteamos el datasource -->
		<property name="dataSource" ref="dataSource" />
		<!-- Seteamos las propiedades de nuestro proveedor de de querys para el 
			reader -->
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="databaseType" value="MySQL" />
				<property name="selectClause" value="SELECT ${sql.select}" />
				<property name="fromClause" value="FROM ${sql.from}" />
				<!-- <property name="whereClause" value="WHERE ${sql.where}" /> -->
				<property name="sortKey" value="${sql.orderBy}" />
			</bean>
		</property>
		<property name="pageSize" value="${sql.paginacion}" />

		<!-- Mapeador personalizado del Reader -->
		<property name="rowMapper">
			<bean class="es.maquina.batching.MapeadoRowMapper" />
		</property>
	</bean>

	<!-- writter usado para escribir en fichero -->
	<bean id="flatFileItemWriter"
		class="org.springframework.batch.item.file.FlatFileItemWriter"
		scope="step">

		<!-- Define el archivo de escritura -->
		<property name="resource" value="file:${carpeta.destino}" />

		<!-- Define el caracter que separara los campos -->
		<property name="lineAggregator">

			<!-- An Aggregator which converts an object into delimited list of strings -->
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">

				<!-- delimitador usado en el writter -->
				<property name="delimiter" value="," />

				<!-- Seteamos el extracotr de campos que usaremos para el mapeo -->
				<property name="fieldExtractor">

					<!-- Extractor de campos que recupera los valores a traves de reflection -->
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="mapaCadenas" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<!-- Bean creado con fines educativos hay explicacion en el codigo -->
	<bean id="valoresRecuperados" class="java.util.ArrayList" />

	<!-- listener que se ejecuta antes y despues de cada job -->
	<bean id="jobListener"
		class="es.maquina.batching.MapeadoJobListener" />

	<!-- Administrador de transacciones -->
	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<!-- Actual Job -->
	<batch:job id="campeonResultJob">
		<batch:step id="pasoUno">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="databaseItemReader"
					writer="flatFileItemWriter" commit-interval="${job.commit}" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">

		<property name="driverClassName" value="org.sqlite.JDBC" />
		<property name="url"
			value="jdbc:sqlite:D:\Users\MaQuiNa1995\Desktop\Ejemplo_SpringBatch\src\main\resources\LeagueOfLegends.sqlite" />
	</bean>

</beans>			